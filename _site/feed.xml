<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.1.1">Jekyll</generator><link href="https://gelato7673.github.io/myblog/feed.xml" rel="self" type="application/atom+xml" /><link href="https://gelato7673.github.io/myblog/" rel="alternate" type="text/html" /><updated>2021-02-13T00:36:24+09:00</updated><id>https://gelato7673.github.io/myblog/feed.xml</id><entry><title type="html">공부해야 하는 내용들</title><link href="https://gelato7673.github.io/myblog/2021/02/12/memo.html" rel="alternate" type="text/html" title="공부해야 하는 내용들" /><published>2021-02-12T00:00:00+09:00</published><updated>2021-02-12T00:00:00+09:00</updated><id>https://gelato7673.github.io/myblog/2021/02/12/memo</id><content type="html" xml:base="https://gelato7673.github.io/myblog/2021/02/12/memo.html">&lt;h3 id=&quot;todo-list&quot;&gt;Todo List&lt;/h3&gt;

&lt;h4 id=&quot;서버사이드-와-데이터-공부가-시급하다&quot;&gt;서버사이드 와 데이터 공부가 시급하다.&lt;/h4&gt;
&lt;p&gt;서버사이드를 공부하는게 시급할듯. 정말 주말마다 해야할지도 ㅋㅋㅋ 아니 매일 해야할지도. 아니 지금해야하는구나… (먼산..)&lt;br /&gt;
그래, 서버사이드 렌딩 공부 안 하면 이 회사에서는 밥 못 먹고 살아갈 것 같아. &lt;br /&gt;
이럴줄 알았으면 미리 해두는건데..&lt;br /&gt;
하지만, 뭐. 지금 후회해서 뭐하니. 하루라도 빨리 공부해서 할 생각을 해야지 뭐..&lt;/p&gt;

&lt;h4 id=&quot;리액트는-밥먹다가도-눈뜨고-나서도-할만큼-잘했으면-좋겠다-아니-그렇게-해야한다&quot;&gt;리액트는 밥먹다가도 눈뜨고 나서도 할만큼 잘했으면 좋겠다. 아니 그렇게 해야한다.&lt;/h4&gt;
&lt;p&gt;Javascript와 리액트에는 정말 능통해 져야 한다. &lt;br /&gt;
React로 생각하는 것은 기본이 되어야 한다. &lt;br /&gt;
미리 React로 공부하지 않은 것이 한 스럽기도 하지만, 그래도. 그 춘추전국시대에 공부를 했다가는 뻗어버렸을지도…&lt;br /&gt;
Css-In-Js도 공부를 해 두어야 할 것 같다. (이걸 오늘한다)&lt;br /&gt;
또 하나, Next.js도 같이 공부할 꺼다.&lt;/p&gt;

&lt;h4 id=&quot;서버사이드에-데이터를-주고-받고-그-데이터를-표현하는-기술&quot;&gt;서버사이드에 데이터를 주고 받고, 그 데이터를 표현하는 기술.&lt;/h4&gt;
&lt;p&gt;Dashboard라던가, 이런걸 하려면 이 기술이 정말로 중요하지. &lt;br /&gt;
그리고.. 얼마전에 nomadcoder에서 봤던 agora를 써보고 싶어. (써보고 싶은게 아니라 알아봐야겠어.)&lt;/p&gt;

&lt;h4 id=&quot;써보고-싶은-새로운-기술들새롭다기보단-해야만-하는-기술들&quot;&gt;써보고 싶은, 새로운 기술들..(새롭다기보단.. 해야만 하는 기술들)&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;TypeScript, node.js로 새로운 서버 만들기 ( + graphQL)&lt;/li&gt;
  &lt;li&gt;nest.js / next.js&lt;/li&gt;
  &lt;li&gt;vue.js로 개인 포트폴리오 만들기&lt;/li&gt;
  &lt;li&gt;Svelte 로 코딩 해보기 (side project)&lt;/li&gt;
  &lt;li&gt;Flutter (Cross platform)&lt;/li&gt;
  &lt;li&gt;트렌드 서치를 어디서 해야하려나?, 적어도 이건 꼭 봐야지!&lt;/li&gt;
  &lt;li&gt;https://2020.stateofjs.com/ko-KR/&lt;/li&gt;
  &lt;li&gt;Go! (Gorgonia)&lt;/li&gt;
  &lt;li&gt;다음번 트렌드 서치는, stateofjs 의 js와 css편&lt;/li&gt;
  &lt;li&gt;그리고, D3의 동향보고서로 해야겠다!&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;커뮤니티와-다른사람의-코드를-많이-보고-기여하는것&quot;&gt;커뮤니티와 다른사람의 코드를 많이 보고, 기여하는것.&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;이제 슬슬 이런걸 해야할 때가 왔어!!&lt;/li&gt;
  &lt;li&gt;학회나 이런것도 꼭 찾아보고 기억하도록 하렴.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;기억해&quot;&gt;기억해.&lt;/h4&gt;
&lt;p&gt;마음만으로는 안돼. 열정을 속으로 생각하는 것만으로도 안돼.&lt;br /&gt;
진짜로 만들어야해. 실제로 해야하는거야. 두려워 하지말고, 왔다갔다 하지말고, 그 길을 향해서 될 꺼라고 믿고 발을 디디길 바래.&lt;br /&gt;
이번 새해는 발을 디디는 새해가 되기를 간절히 바란다.&lt;/p&gt;</content><author><name></name></author><category term="githubpage," /><category term="dependency-manager," /><category term="preprocessors," /><category term="phython" /><summary type="html">Todo List</summary></entry><entry><title type="html">[trend search] 2021.2.2주차</title><link href="https://gelato7673.github.io/myblog/2021/02/12/trend.html" rel="alternate" type="text/html" title="[trend search] 2021.2.2주차" /><published>2021-02-12T00:00:00+09:00</published><updated>2021-02-12T00:00:00+09:00</updated><id>https://gelato7673.github.io/myblog/2021/02/12/trend</id><content type="html" xml:base="https://gelato7673.github.io/myblog/2021/02/12/trend.html">&lt;p&gt;미루고 미루다가 1달만에 trend search를 쓰게 되었다. trend search덕분에 컴퓨터 앞에 앉게 되었으니 다행이지. 해야하는 걸 알고 있으면서도 계속 다른일을 해서 안하게 될까봐 걱정했었는데. 다행이다. 하게 되었으니까.&lt;br /&gt;
확실히 trend search를 쓰고 안쓰고 차이가 있는게, 써야 정리가 훨씬 잘 된다. 뭘 공부해야하는지도 보이고..&lt;br /&gt;
맨날 이번것만 하고 써야지.. 라고 했는데, 그러지 말고 써놔야 할 것 같다.&lt;br /&gt;
한달만에 쓰면서, 새로운 것들 보다는 내가 해왔던 일들을 적으면 좋을 것 같다.&lt;/p&gt;

&lt;h3 id=&quot;javascript-es6&quot;&gt;Javascript ES6&lt;/h3&gt;
&lt;p&gt;React 튜토리얼을 보면서, 내가 Javascript에서 부족한 부분이 정말 많구나. 하는 생각을 하게 되었던 것 같다.&lt;br /&gt;
Mozilla에 Javascript 재입문하기(Js튜토리얼) 이라는 글이 있는데, 다시 읽어보면 ES6를 익히는데 많은 도움이 된다.&lt;br /&gt;
https://developer.mozilla.org/ko/docs/A_re-introduction_to_JavaScript&lt;/p&gt;

&lt;h3 id=&quot;react로-생각하기&quot;&gt;React로 생각하기&lt;/h3&gt;
&lt;p&gt;기존에 html과 css로만 지내던 나로써는.. React로 생각해서 마크업하고, JS로 코딩하는 일들이 쉽지 만은 않았다. 그렇지만, 이런저런 유지보수를 하면서 React로 생각할 수 있는 기회를 많이 접할 수 있어서 좋았다. component로 생각하고 코딩하는일. CSS를 Javavascript로 코딩하는 일들 등..&lt;/p&gt;

&lt;h3 id=&quot;gatsby-material-ui&quot;&gt;Gatsby, Material UI&lt;/h3&gt;
&lt;p&gt;유지보수를 하게 된 홈페이지가 Gatsby framework와 Material UI를 쓰고 있어서 덕분에 알게 되었다. material은 다 좋은데, grid가 너무 많고.. Gatsby framework는 블로그 용으로 적합한 것 같다. seo랑 마크업 퍼블리싱 기능등이 있어서, 포스팅같은걸 올리기에 좋은데, 문제는 확장성에 있어서 여러가지 제약이 걸린다는 것이 이래저래 문제인 것 같다.&lt;/p&gt;</content><author><name></name></author><category term="githubpage," /><category term="dependency-manager," /><category term="preprocessors," /><category term="phython" /><summary type="html">미루고 미루다가 1달만에 trend search를 쓰게 되었다. trend search덕분에 컴퓨터 앞에 앉게 되었으니 다행이지. 해야하는 걸 알고 있으면서도 계속 다른일을 해서 안하게 될까봐 걱정했었는데. 다행이다. 하게 되었으니까. 확실히 trend search를 쓰고 안쓰고 차이가 있는게, 써야 정리가 훨씬 잘 된다. 뭘 공부해야하는지도 보이고.. 맨날 이번것만 하고 써야지.. 라고 했는데, 그러지 말고 써놔야 할 것 같다. 한달만에 쓰면서, 새로운 것들 보다는 내가 해왔던 일들을 적으면 좋을 것 같다.</summary></entry><entry><title type="html">이번년도에 꼭 해보고 싶은일. 1 금융공부및 주식 사보기, 2 부동산</title><link href="https://gelato7673.github.io/myblog/2021/02/12/stock.html" rel="alternate" type="text/html" title="이번년도에 꼭 해보고 싶은일. 1 금융공부및 주식 사보기, 2 부동산" /><published>2021-02-12T00:00:00+09:00</published><updated>2021-02-12T00:00:00+09:00</updated><id>https://gelato7673.github.io/myblog/2021/02/12/stock</id><content type="html" xml:base="https://gelato7673.github.io/myblog/2021/02/12/stock.html">&lt;h3 id=&quot;30대에-본격적으로-들어서면서&quot;&gt;30대에 본격적으로 들어서면서.&lt;/h3&gt;

&lt;p&gt;커리어 이동을 계속 할 것인지. 아니면, 여기서 여정을 멈출 것인지는 아직 확실하지 않다. 
하지만, 회사를 보는 눈을 기를 수 있어야지 이 회사에 남을지 옮겨야 할지 등을 판단할 수 있을 것이다. 
간다면 어떤 회사로 갈 것인지, 이 회사의 장.단점은 무엇인지 등..&lt;/p&gt;

&lt;p&gt;회사들이 어떤 구조로 수익을 내고, 경쟁사는 어떠한지, 그 사이에서 이 회사가 살아남아서 잘 성장할 것인지. 
내가 이회사를 밀어 주고 싶은지 등등… 여러가지 이유가 있겠지만. 
어쨌든 그런 산업을 보는 눈을 기르고 싶어서. 이번년에는 주식을 사보고 싶다.&lt;/p&gt;

&lt;h3 id=&quot;사고-싶은-주식-리스트와-그-이유&quot;&gt;사고 싶은 주식 리스트와 그 이유.&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;이솔(?)&lt;/li&gt;
  &lt;li&gt;당근마켓?!&lt;/li&gt;
  &lt;li&gt;리듐 베터리 처리기술을 가진 기업이라던지.&lt;/li&gt;
  &lt;li&gt;친환경 이슈에서 살아남을 수 있는 기업.&lt;/li&gt;
  &lt;li&gt;배터리 재활용 기술, 배터리 처리기술..&lt;/li&gt;
  &lt;li&gt;남는것을 어떻게 처리할 것인가.&lt;/li&gt;
  &lt;li&gt;종이로 봉투나 일회용 제품을 만드는 기술을 가진 기업들.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;일단-무엇을-알아야-할까&quot;&gt;일단 무엇을 알아야 할까.&lt;/h3&gt;
&lt;p&gt;종목이 어떻게.. 상장이 되어있는지 아닌지 확인하는법. 사고 파는법. 
그외에 주식의 기본기(?) 같은건 좀 알아야 하지 않나 싶기도 하고 그렇다. (근데, 이게 도움이 되려나..)
금융상품들이 어떤 것들이 있는지도 좀 알아두면 좋을 것 같다. 
난 그런걸 하나도 안 알아보고 썼던 지라..&lt;/p&gt;

&lt;h3 id=&quot;그냥-여기-쓰는거지만-부동산도&quot;&gt;그냥 여기 쓰는거지만 부동산도..&lt;/h3&gt;
&lt;p&gt;아직, 부동산은 구체적으로 아는 바가 없어서..
그렇지만, 사무실이나 상가에 관해서 사고파는 부분이라던가. 
집을 사려면 몇년전에 세대 분리를 하고.. 청약으로 아파트를 사는 방법 이라던가. 
나가게 되면, 어디선가.. 서울에서 직장생활을 해야하니까. 미리 잡을 수 있도록 준비를 해두는 것이 좋을 것 같다는 
생각이 들었다. 함께 살아서 좋은건 정말 많고 좋다. 
그렇지만, 어떻게 하면 이 다음에 살아갈 수 있을지도 틈틈히 생각하면서 준비해 둔다면 닥쳤을때에 조금은 났지 않을까.. 
하는 기대를 해보는 것 같다.&lt;/p&gt;</content><author><name></name></author><category term="stock," /><category term="financial" /><summary type="html">30대에 본격적으로 들어서면서.</summary></entry><entry><title type="html">[trend search] 회사 준비 관련 내용들</title><link href="https://gelato7673.github.io/myblog/2021/01/07/prepare_agency.html" rel="alternate" type="text/html" title="[trend search] 회사 준비 관련 내용들" /><published>2021-01-07T00:00:00+09:00</published><updated>2021-01-07T00:00:00+09:00</updated><id>https://gelato7673.github.io/myblog/2021/01/07/prepare_agency</id><content type="html" xml:base="https://gelato7673.github.io/myblog/2021/01/07/prepare_agency.html">&lt;h3 id=&quot;회사-준비-관련-내용들&quot;&gt;회사 준비 관련 내용들&lt;/h3&gt;

&lt;h4 id=&quot;soud--data-visualization-관련링크&quot;&gt;Soud / Data visualization 관련링크&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.kaleidosync.com/&quot;&gt;spotify&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.reddit.com/r/javascript/comments/kkf956/drawings_animated_by_your_current_time_of_day/?utm_source=share&amp;amp;utm_medium=web2x&amp;amp;context=3&quot;&gt;Drawings&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="agency," /><category term="react," /><category term="data" /><category term="visualization" /><summary type="html">회사 준비 관련 내용들</summary></entry><entry><title type="html">[trend search] 2021.1.2주차</title><link href="https://gelato7673.github.io/myblog/2021/01/04/trend.html" rel="alternate" type="text/html" title="[trend search] 2021.1.2주차" /><published>2021-01-04T00:00:00+09:00</published><updated>2021-01-04T00:00:00+09:00</updated><id>https://gelato7673.github.io/myblog/2021/01/04/trend</id><content type="html" xml:base="https://gelato7673.github.io/myblog/2021/01/04/trend.html">&lt;h3 id=&quot;이번주에-css에-관해서-생각해본-내용들&quot;&gt;이번주에 CSS에 관해서 생각해본 내용들&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;em, rem
&lt;a href=&quot;https://developer.mozilla.org/ko/docs/Web/CSS/font-size&quot;&gt;출처: Mozilla css font-size&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;containing block
&lt;a href=&quot;https://developer.mozilla.org/ko/docs/Web/CSS/All_About_The_Containing_Block&quot;&gt;출처: Mozilla css containingBlock&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;vh, wh
&lt;a href=&quot;https://developer.mozilla.org/ko/docs/Web/CSS/length&quot;&gt;출처: Mozilla css length&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Flexbox
&lt;a href=&quot;https://developer.mozilla.org/ko/docs/Web/CSS/CSS_Flexible_Box_Layout/Flexbox%EC%9D%98_%EA%B8%B0%EB%B3%B8_%EA%B0%9C%EB%85%90&quot;&gt;출처: Mozilla css flexbox&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Grid Layout
&lt;a href=&quot;https://developer.mozilla.org/ko/docs/Web/CSS/CSS_Grid_Layout&quot;&gt;출처: Mozilla css GridLayout&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;dl&gt;
      &lt;dt&gt;transform&lt;/dt&gt;
      &lt;dd&gt;재미있는점 - none이 아닌 값을 지정하면 새로운 쌓임 맥락을 생성합니다. 이 경우, position이 fixed거나 absolute인 요소의 컨테이닝 블록으로서 작용합니다.
:&lt;a href=&quot;https://developer.mozilla.org/ko/docs/Web/CSS/transform&quot;&gt;출처: Mozilla css transform&lt;/a&gt;&lt;/dd&gt;
    &lt;/dl&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;perspective
&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/perspective&quot;&gt;출처: Mozilla css perspective&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;attr()
&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/attr()&quot;&gt;출처: Mozilla css attr()&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;dl&gt;
      &lt;dt&gt;calc()&lt;/dt&gt;
      &lt;dd&gt;CSS로도 계산이 된다는것 ! &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/calc()&quot;&gt;출처: Mozilla css calc()&lt;/a&gt;&lt;/dd&gt;
    &lt;/dl&gt;
  &lt;/li&gt;
  &lt;li&gt;자꾸보고 써본다면 의미있는 css모음집
&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Archive/CSS3&quot;&gt;출처: Mozilla css Archive&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;front-end-인터뷰&quot;&gt;Front-end 인터뷰&lt;/h3&gt;

&lt;h4 id=&quot;브라우저-엔진별로-달라지는-스타일에-대처하는-방법들&quot;&gt;브라우저 엔진별로 달라지는 스타일에 대처하는 방법들&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;prefix&lt;/li&gt;
  &lt;li&gt;reset style sheet&lt;/li&gt;
  &lt;li&gt;meta tag&lt;/li&gt;
  &lt;li&gt;conditional comment&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;반응형-방식&quot;&gt;반응형 방식&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Mostly Fluid&lt;/li&gt;
  &lt;li&gt;column drop&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;front-end-인터뷰-스크랩&quot;&gt;Front-end 인터뷰 스크랩&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.reddit.com/r/Frontend/comments/kipg81/how_to_prepare_for_a_lead_frontend_developer/?utm_source=share&amp;amp;utm_medium=web2x&amp;amp;context=3&quot;&gt;reddit&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/yangshun/front-end-interview-handbook/blob/master/contents/kr/README.md&quot;&gt;front-end-interview-handbook&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;mvc-model-svg-canvas-restfulapi-post와-get&quot;&gt;MVC-model, Svg, Canvas, RestfulAPI, Post와 Get&lt;/h4&gt;
&lt;ol&gt;
  &lt;li&gt;MVC-model
    &lt;ul&gt;
      &lt;li&gt;MVC 는 일종의 디자인 패턴이다. (&lt;a href=&quot;https://m.blog.naver.com/jhc9639/220967034588&quot;&gt;간단한 설명&lt;/a&gt;)&lt;/li&gt;
      &lt;li&gt;Controller는 View와 라이프 사이클과 강하게 연결되어있어서 분리하기 어렵고, 코드 분석/수정과 테스트가 모두 힘들어지며, 복잡하게 엮어있는 모델과 뷰는 여러 Side-Effect가 생겨 프로그램 운영이 힘들어진다.&lt;/li&gt;
      &lt;li&gt;그래서, 이러한 문제점 보완을 위한 여러 다양한 패턴들이 있다.&lt;/li&gt;
      &lt;li&gt;MVP, MVVM, Viper, Clean Architecture, Flux, Redux, RxMVVM&lt;/li&gt;
      &lt;li&gt;직접 구현해 보는 것이가장 좋은 공부방법. 이라는것은 두말하면 잔소리일듯&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;SVG&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/ko/docs/Web/SVG/Tutorial&quot;&gt;Mozilla svg tutorial&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://svgontheweb.com/ko/&quot;&gt;웹에서 svg 사용하기 실습가이드&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://opentutorials.org/course/2418/13666&quot;&gt;생활코딩 - svg&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
  &lt;li&gt;Canvas API
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/ko/docs/Web/HTML/Canvas&quot;&gt;Mozilla Canvas API&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;WebGL
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/ko/docs/Web/API/WebGL_API&quot;&gt;Mozilla WebGL&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;REST API
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://www.redhat.com/ko/topics/integration/whats-the-difference-between-soap-rest&quot;&gt;RedHat&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://meetup.toast.com/posts/92&quot;&gt;Toast Meetup - 알아듣기쉽게 설명!&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;GraphQl
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://www.redhat.com/ko/topics/api/what-is-graphql&quot;&gt;RedHat&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Post &amp;amp; Get
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://hongsii.github.io/2017/08/02/what-is-the-difference-get-and-post/&quot;&gt;블로그 : https://hongsii.github.io/2017/08/02/what-is-the-difference-get-and-post/&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;reddit에서-구독받은-내용들&quot;&gt;reddit에서 구독받은 내용들&lt;/h3&gt;

&lt;h4 id=&quot;디자인-툴-관련&quot;&gt;디자인 툴 관련&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://startupstash.com/web-design-resources/&quot;&gt;startup stash (design tools)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://visly.app/blogposts/visly--build-react-components-visually&quot;&gt;Visly&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;포트폴리오-만들때-참고할-사이트&quot;&gt;포트폴리오 만들때 참고할 사이트&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;animxyz - Toolkit&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.reddit.com/r/Frontend/comments/ked5vz/my_brother_and_i_made_the_first_composable_css/?utm_source=share&amp;amp;utm_medium=web2x&amp;amp;context=3&quot;&gt;reddit 관련글 게시&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://animxyz.com/&quot;&gt;https://animxyz.com/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://animxyz.com/docs&quot;&gt;https://animxyz.com/docs&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://gridsome.org/&quot;&gt;Gridsome&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/ingram-projects/animxyz&quot;&gt;animxyz - github source&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;그외-알고-싶었던-내용들&quot;&gt;그외 알고 싶었던 내용들&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;boilerplate&lt;/li&gt;
  &lt;li&gt;Tailwind-esque approach&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://evilmartians.com/chronicles/how-to-favicon-in-2021-six-files-that-fit-most-needs&quot;&gt;Favicon 2021&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;따라해-보고-싶은-좋은-front-end-작품들&quot;&gt;따라해 보고 싶은 좋은 Front-end 작품(?)들&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.reddit.com/r/Frontend/comments/kfkvci/learn_to_make_a_christmas_game_using_html5_canvas/?utm_source=share&amp;amp;utm_medium=web2x&amp;amp;context=3&quot;&gt;간단한 크리스 마스 게임 만들어 보기&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://e-commerce-in-25-days.netlify.app/&quot;&gt;netlify로 E-commerce in 25days 만들기&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.reddit.com/r/javascript/comments/kkf956/drawings_animated_by_your_current_time_of_day/?utm_source=share&amp;amp;utm_medium=web2x&amp;amp;context=3&quot;&gt;Draft Island(https://daftisland.netlify.app/) reddit 글&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.reddit.com/r/javascript/comments/k7rxg7/open_source_airtable_built_using_reactjs/?utm_source=share&amp;amp;utm_medium=web2x&amp;amp;context=3&quot;&gt;Firetable(https://firetable.io/) reddit 글&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;공부할-내용들&quot;&gt;공부할 내용들&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.reddit.com/r/Frontend/comments/kkhn4y/rethinking_my_tech_stack_for_2021/?utm_source=share&amp;amp;utm_medium=web2x&amp;amp;context=3&quot;&gt;CSS에 관해(https://www.ryangittings.co.uk/blog/writing-modern-css-with-blyth/) reddit 글 &lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Front-end에서 어떤 언어들이 인기가 있는지? 왜 인기가 있는지??&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="githubpage," /><category term="dependency-manager," /><category term="preprocessors," /><category term="phython" /><summary type="html">이번주에 CSS에 관해서 생각해본 내용들 em, rem 출처: Mozilla css font-size</summary></entry><entry><title type="html">[clone coding] Javascript - Todolist Sigle Application</title><link href="https://gelato7673.github.io/myblog/2021/01/04/check-todolist_js.html" rel="alternate" type="text/html" title="[clone coding] Javascript - Todolist Sigle Application" /><published>2021-01-04T00:00:00+09:00</published><updated>2021-01-04T00:00:00+09:00</updated><id>https://gelato7673.github.io/myblog/2021/01/04/check-todolist_js</id><content type="html" xml:base="https://gelato7673.github.io/myblog/2021/01/04/check-todolist_js.html">&lt;p&gt;Nomad coders의 바닐라 JS로 크롬 앱 만들기 를 통해 직접 따라해보면서 완성한 Todolist Singlie Application 이며, Javascript로 제작하였다.&lt;/p&gt;

&lt;p&gt;
&lt;img src=&quot;/myblog/assets/conts_img/JS_todolist.png&quot; style=&quot;width:500px; border: 1px solid #efefef;&quot; /&gt;
&lt;/p&gt;

&lt;h3 id=&quot;제작순서&quot;&gt;제작순서&lt;/h3&gt;
&lt;p&gt;Vue.js에 이어서 두번재로 만드는 todolist Single Application 이었다. Vue때와 다른 점이 있다면 Vanila Javascript라는 점, 그리고 순서구현에 있어서 기능을 먼저 구현했다는 점이 있다. 공동점은 두 프로젝트 모두 css와 javascript를 componenets별로 나누어서 제작했다는 점이 있을 것 같다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;일단 기능을 중심으로 components를 나누고 만들 순서를 정한다. (지난프로그램과 다르게, 여러 기능을 구현하였다)
    &lt;ul&gt;
      &lt;li&gt;시간표시&lt;/li&gt;
      &lt;li&gt;background 사진 변경&lt;/li&gt;
      &lt;li&gt;이름입력받아 표시&lt;/li&gt;
      &lt;li&gt;현재지역의 온도표시&lt;/li&gt;
      &lt;li&gt;할일입력&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;그 components의 기능을 구현하자. (데이터 연동은 나중으로 미룬다. 그냥 그 컴포넌트 안에서 구현되는 정도의 기능이면 된다.)
    &lt;ul&gt;
      &lt;li&gt;vue.js와 다르게, 데이터의 연동 부분까지 한번에 끝&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;보이는 껍데기를 만든다. html으로 구조를 만들고, css로 보이는 스타일을 입혀주자.&lt;/li&gt;
  &lt;li&gt;transition 효과등 animation 효과를 추가해서 좀더 자연스럽게 보이도록 노력한다.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;참고문헌-저장소&quot;&gt;참고문헌, 저장소&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;참고강의 : “바닐라 JS로 크롬 앱 만들기” - Nomad coders&lt;/li&gt;
  &lt;li&gt;git 저장소 : &lt;a href=&quot;https://github.com/Gelato7673/js_todolist.git&quot;&gt;https://github.com/Gelato7673/js_todolist&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="javascript" /><category term="vue" /><summary type="html">Nomad coders의 바닐라 JS로 크롬 앱 만들기 를 통해 직접 따라해보면서 완성한 Todolist Singlie Application 이며, Javascript로 제작하였다.</summary></entry><entry><title type="html">[book] Doit! 예제로 이해하고 실전프로젝트로 완성한다! Vue.js 입문</title><link href="https://gelato7673.github.io/myblog/2020/12/20/check-doitvue.html" rel="alternate" type="text/html" title="[book] Doit! 예제로 이해하고 실전프로젝트로 완성한다! Vue.js 입문" /><published>2020-12-20T00:00:00+09:00</published><updated>2020-12-20T00:00:00+09:00</updated><id>https://gelato7673.github.io/myblog/2020/12/20/check-doitvue</id><content type="html" xml:base="https://gelato7673.github.io/myblog/2020/12/20/check-doitvue.html">&lt;h3 id=&quot;책소개&quot;&gt;책소개&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;책 제목 : Doit! 예제로 이해하고 실전 프로젝트로 완성한다! Vue.js 입문&lt;/li&gt;
  &lt;li&gt;지은이 : 장기효&lt;/li&gt;
  &lt;li&gt;출판사 : 이지스퍼블리싱&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;책의-장점&quot;&gt;책의 장점&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;책이 얇다. 내가 이 책을 선택하게 된 큰 이유중 하나다 (^^;)&lt;/li&gt;
  &lt;li&gt;큰 줄기에서 중요한 내용들을 집고 넘어갈 수 있다.  사실, 자잘한 내용은 기술문서를 참고하면 됨으로 괜찮다.&lt;/li&gt;
  &lt;li&gt;예제로 따라해 볼 수도 있고, 뒤에 실습으로 마무리 해 볼 수 있다.&lt;/li&gt;
  &lt;li&gt;초보자가 잘 모를 수 있다고 생각한 부분들에 대한 코멘트나, 현장에서 쓸때의 tip등이 뒤에 들어가 있다.&lt;/li&gt;
  &lt;li&gt;vue.js의 이론적 설명들..예를들어 배경이되는 기술들 소개, life cycle, vue의 구조에 관한 내용들도 있다.&lt;/li&gt;
  &lt;li&gt;이 책을 공부하면서 좀 더 공부해 보고 싶은 내용도 생겼다. 그런 내용들은 추후에 따로 다루도록 해야겠다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;공부방법&quot;&gt;공부방법&lt;/h3&gt;
&lt;p&gt;내가 이 책으로 공부한 방법은 다음과 같다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;앞에 vue.js에 관한 개념은 눈으로 읽고 중요해보이는 부분은 펜으로 표시한다.&lt;/li&gt;
  &lt;li&gt;본격적으로 기술에 관한 내용이 나오기 시작하면, 눈으로 읽되 예제는  따라하고, 퀴즈를 풀어가면서 읽는다. (읽는다기보다는 직접 클론코딩한다는 느낌으로 vue.js를 익힌다.)&lt;/li&gt;
  &lt;li&gt;그렇게 배워가다보면은 중반정도를 지나고 슬슬 어려운 개념이 나온다 ㅋㅋ 그동안 앞에서 배운 내용을 확실하지 않으면, 뒷부분의 데이터 버스 등의 중요한 개념들부분에서 혼란이 올 수 있다.&lt;/li&gt;
  &lt;li&gt;그래서, 그런 개념들이 나올 즈음에 책 읽기를 멈추고, &lt;a href=&quot;https://kr.vuejs.org/v2/guide/index.html&quot;&gt;vue.js 사이트&lt;/a&gt;에 들어가서 기술문서들에 설명되어있는 vue.js 주요 명령어들을 다시한번 따라하면서 익혔다.
책이 한눈에 vue.js의 주요 흐름을 따라가기에 좋다면, 기술문서는 다양하고 구체적인 예시들이 나와있어서 vue.js명령어를 이해하기에 좋다. 특히 vue.js의 기술문서는 잘 되어있는 편이니 추천!&lt;/li&gt;
  &lt;li&gt;이렇게 한번 기술문서를 탐독하고 나서 이후의 데이터 이동에 관한 내용을 마저 공부하면, 이해도 쉽고 기술문서보면서 애매했던 부분도 정리가 잘 된다.&lt;/li&gt;
  &lt;li&gt;그리고 나서 todo list 싱글 어플리케이션 만드는 실전프로젝트로 마무리를 하면, vue.js의 실제사용모습을 이해할 수 있다.&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;기술문서를-읽을때&quot;&gt;기술문서를 읽을때…&lt;/h4&gt;
&lt;p&gt;기술문서를 읽을때 모든 명령어를 이해하고 지나간다면 좋겠지만, 예제가 충분치 않거나 이해가 안되는 명령어를 만날 수 있다.&lt;br /&gt;
꼭 그런것은 아니지만, 아마도.. Javascript의 이해도가 높다면 vue.js의 명령어가 어렵지 않겠지만, 내 느낌상 Javscript에서 아직 익숙치 않았던 구간은 Vue에서 만나도 익숙치 않더라.&lt;br /&gt;
그럴땐, 일단 넘어가서 다음 명령어들의 예시를 읽어나가자. 물론, 실제 프로젝트에서 반복적으로 그 명령어가 사용되는 상황이고, 계속해서 이해하지 못해서 에러가 난다면 파고들어서 이해하고 지나갈 필요가 있다. &lt;br /&gt;
하지만, 그냥 처음 읽는 상황이라면 일단 넘어가서 계속 읽어나가다가 보면 앞에서 이해 못했던 내용을 뒤의 다른 명령어의 예시에서 이해하게 될 수도 있다. 그럼으로, 처음 기술문서를 읽을때는 개념과 예시만 확인하고 일단 넘어가는것도 괜찮은것 같다. &lt;br /&gt;
어차피 실제로 무언가를 만들어보면서 기술문서를 다시봐야만 한다. 그럼으로, 처음 기술문서를 읽을때에는 이걸 완벽히 이해하겠다는 마음보다는 그 문법에 익숙해 지겠다는 마음으로 보는 것이 좋은것 같다.&lt;/p&gt;</content><author><name></name></author><category term="javascript" /><category term="vue" /><summary type="html">책소개 책 제목 : Doit! 예제로 이해하고 실전 프로젝트로 완성한다! Vue.js 입문 지은이 : 장기효 출판사 : 이지스퍼블리싱</summary></entry><entry><title type="html">[clone coding] vue.js - Todolist Sigle Application</title><link href="https://gelato7673.github.io/myblog/2020/12/20/check-todolist.html" rel="alternate" type="text/html" title="[clone coding] vue.js - Todolist Sigle Application" /><published>2020-12-20T00:00:00+09:00</published><updated>2020-12-20T00:00:00+09:00</updated><id>https://gelato7673.github.io/myblog/2020/12/20/check-todolist</id><content type="html" xml:base="https://gelato7673.github.io/myblog/2020/12/20/check-todolist.html">&lt;p&gt;“Doit! 예제로 이해하고 실전프로젝트로 완성한다! Vue.js 입문” 책 뒷편에 나온 코드들을 직접 따라해보면서 완성한 Todolist Singlie 
Application 입니다. Vue.js로 제작하였습니다.&lt;/p&gt;

&lt;p&gt;
&lt;img src=&quot;/myblog/assets/conts_img/20201220_124720.png&quot; style=&quot;width:500px; border: 1px solid #efefef;&quot; /&gt;
&lt;/p&gt;

&lt;h3 id=&quot;clone-coding--실전-프로젝트는-어떻게-따라하면-공부가-잘-될까&quot;&gt;Clone coding &amp;amp; 실전 프로젝트는 어떻게 따라하면, 공부가 잘 될까?&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;일단은 따라서 clonecoding을 해본다.&lt;/li&gt;
  &lt;li&gt;익숙한 언어라면 처음부터 어떻게 싱글 어플리케이션을 구성하면 될지 스스로 풀어보는 것도 좋지만, vue.js로 싱글어플리케이션을 제작해 보는것은 처음이기 때문에 clonecoding형식으로 따라해보는 것이 좋을것 같았다.&lt;/li&gt;
  &lt;li&gt;중반쯤까지 clonecoding을 하다보면은, 뭔가 꼬여서 잘 안된다는 느낌을 받는다. 왜냐하면, 어플리케이션을 스스로 구성하고 이해하면서 코드를 짜고 있는것이 아닌 단순 clonecoding상태이기 때문에 조금만 가도 꼬인다 ㅋㅋㅋ&lt;/li&gt;
  &lt;li&gt;이때부터, 다시 내가 싱글 어플리케이션을 만들어 본다는 느낌으로 앞부터 스스로 다시 구성해보면서 코딩해본다.(머리로 잘 안될때는 펜과 종이를 이용해라) 그러면, 앞에서 무작정 따라 했던 내용이 정리되어서 들어올 것이다.&lt;/li&gt;
  &lt;li&gt;뒷 부분을 참조해 가면서 실전 프로젝트를 마무리 짓는다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;싱글어플리케이션-만들때-순서--느낀점&quot;&gt;싱글어플리케이션 만들때 순서 &amp;amp; 느낀점&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;일단 기능을 중심으로 조각조각 components를 나눈다. 내가 생각한것 보다 더 잘게 나눠야 하는듯.&lt;/li&gt;
  &lt;li&gt;일단 보이는 껍데기를 만든다. html으로 구조를 만들고, css로 보이는 스타일을 입혀주자.&lt;/li&gt;
  &lt;li&gt;그 components의 기능을 구현하자. (데이터 연동은 나중으로 미룬다. 그냥 그 컴포넌트 안에서 구현되는 정도의 기능이면 된다.)&lt;/li&gt;
  &lt;li&gt;데이터가 잘 연동될 수 있도록 코드를 수정하자. data-flow에 관련된 코드는 App.vue에 들어가 있게 되는 것 같다.&lt;/li&gt;
  &lt;li&gt;transition 효과등 animation 효과를 추가해서 좀더 자연스럽게 보이도록 노력한다.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;참고문헌-저장소&quot;&gt;참고문헌, 저장소&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;참고문헌 : “Doit! 예제로 이해하고 실전프로젝트로 완성한다! Vue.js 입문”&lt;/li&gt;
  &lt;li&gt;git 저장소 : &lt;a href=&quot;https://github.com/Gelato7673/vue_todolist.git&quot;&gt;https://github.com/Gelato7673/vue_todolist.git&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="javascript" /><category term="vue" /><summary type="html">“Doit! 예제로 이해하고 실전프로젝트로 완성한다! Vue.js 입문” 책 뒷편에 나온 코드들을 직접 따라해보면서 완성한 Todolist Singlie Application 입니다. Vue.js로 제작하였습니다.</summary></entry><entry><title type="html">[book] Doit! 예제로 이해하고 실전프로젝트로 완성한다! Vue.js 입문</title><link href="https://gelato7673.github.io/myblog/2020/12/07/vue.html" rel="alternate" type="text/html" title="[book] Doit! 예제로 이해하고 실전프로젝트로 완성한다! Vue.js 입문" /><published>2020-12-07T00:00:00+09:00</published><updated>2020-12-07T00:00:00+09:00</updated><id>https://gelato7673.github.io/myblog/2020/12/07/vue</id><content type="html" xml:base="https://gelato7673.github.io/myblog/2020/12/07/vue.html">&lt;ol&gt;
  &lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;sandbox랑..&lt;/p&gt;

&lt;p&gt;작성중…
&amp;lt;!– 
&lt;a href=&quot;https://kr.vuejs.org/v2/guide/&quot;&gt;vue.js 사이트 바로가기&lt;/a&gt;
https://kr.vuejs.org/v2/api/#v-once&lt;/p&gt;

&lt;p&gt;//npm 이랑, 음.. node.js랑 해서 어떻게 돌아가는지 . 예상하기로는..node.js로 해서 컴파일 되는것 같은데.
v-model wow…&lt;/p&gt;

&lt;p&gt;npm webpack&lt;/p&gt;

&lt;p&gt;node.js 등에 대하여…&lt;/p&gt;

&lt;p&gt;vue의 구동 원리에 대하여&lt;/p&gt;

&lt;p&gt;///
명령형과 선언형 코딩에 대하여서
///&lt;/p&gt;

&lt;p&gt;바인딩
https://medium.com/pocs/%EB%B0%94%EC%9D%B8%EB%94%A9-binding-4a4a2f641b27&lt;/p&gt;

&lt;p&gt;v-model 양방향 바인딩&lt;/p&gt;

&lt;p&gt;&amp;lt;a v-bind:[someAttr]=”value”&amp;gt; … &amp;lt;/a&amp;gt;
https://kr.vuejs.org/v2/guide/syntax.html
동적 전달인자를 어떻게 처리하는지가 궁금하구먼&lt;/p&gt;

&lt;p&gt;computed와 watched에 대한 예제가 더욱 필요한듯.
https://kr.vuejs.org/v2/guide/computed.html
이 예제를 실제로 구현해 보자.&lt;/p&gt;

&lt;p&gt;3항 연산자
https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Operators/Conditional_Operator&lt;/p&gt;

&lt;p&gt;v-model은 내부적으로 서로 다른 속성을 사용하고 서로 다른 입력 요소에 대해 서로 다른 이벤트를 전송합니다 :&lt;/p&gt;

&lt;p&gt;text 와 textarea 태그는 value속성과 input이벤트를 사용합니다.
체크박스들과 라디오버튼들은 checked 속성과 change 이벤트를 사용합니다.
Select 태그는 value를 prop으로, change를 이벤트로 사용합니다.&lt;/p&gt;

&lt;p&gt;===========&lt;/p&gt;

&lt;p&gt;Props page&lt;/p&gt;

&lt;p&gt;https://kr.vuejs.org/v2/guide/components-props.html&lt;/p&gt;

&lt;p&gt;npm에서 설치하는 방식으로 하고 싶다.
npm, webpack, 등등.. 그리고 지우기
** 웹팩과 브라우저 파이
다 읽고, 쓰고,&lt;/p&gt;

&lt;p&gt;//자주쓰는 cli명령어
https://tuhbm.github.io/2017/07/17/cli/&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;to-do list 만들기
 –&amp;gt;&lt;/p&gt;</content><author><name></name></author><category term="javascript" /><summary type="html"></summary></entry><entry><title type="html">[blog]블로그 스타일등 업데이트</title><link href="https://gelato7673.github.io/myblog/2020/12/05/managinbblog.html" rel="alternate" type="text/html" title="[blog]블로그 스타일등 업데이트" /><published>2020-12-05T00:00:00+09:00</published><updated>2020-12-05T00:00:00+09:00</updated><id>https://gelato7673.github.io/myblog/2020/12/05/managinbblog</id><content type="html" xml:base="https://gelato7673.github.io/myblog/2020/12/05/managinbblog.html">&lt;h3 id=&quot;전반적으로-블로그-디자인-등-손보기&quot;&gt;전반적으로 블로그 디자인 등 손보기&lt;/h3&gt;

&lt;h4 id=&quot;이전블로그모습&quot;&gt;이전블로그모습&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/myblog/assets/conts_img/page_index.png&quot; style=&quot;width:100%; max-width: 1000px; border: 1px solid #efefef;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;개편이후-블로그-모습&quot;&gt;개편이후 블로그 모습&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/myblog/assets/conts_img/page02_index.png&quot; style=&quot;width:100%; max-width: 1000px; border: 1px solid #efefef;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;개편내용&quot;&gt;개편내용&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;메뉴 정리&lt;/li&gt;
  &lt;li&gt;전체적으로 디자인 정리&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="style" /><category term="scss" /><category term="drawer" /><summary type="html">전반적으로 블로그 디자인 등 손보기</summary></entry></feed>